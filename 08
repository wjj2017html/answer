谈谈你对MVC,MVP和MVVM的理解？

我所理解的mvc,
1.MVC全名是Model View Controller，是为解决程序模块化问题，于是MVC模式出现了

Model（模型） - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。
View（视图） - 视图代表模型包含的数据的可视化。
Controller（控制器） - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。

之前的jq+div+cSS+ajax，
div+css 是V，模型，负责界面展示，将数据呈现给用户
ajax 是C,控制器，用于链接 M和V数据的接收传送，并将其交给视图
js是M，从ajax返回的数据，操作DOM改变都通过它，用于用户和应用产生交互

MVC
1.MVC模式实现显示模块与功能模块的分离。提高了程序的可维护性、可移植性、可扩展性与可重用性，降低了程序开发难度，降低了后期维护的难度
2.视图与控制器的可插拔性；
缺点：
1.增加了系统结构和实际实现的复杂度；
2.视图与控制器过于紧密的连接。
3.视图对模型的数据的低效率访问。
4.可能有一些用户界面无法使用MVC模式，改造分离的代价太高


MVP
M、V层还是有相互交叉、隔离度不够，同时写到Activity上使得Activity代码臃肿，于是出现了MVP： 隔离了MVC中的 M 与 V 的直接联系，将M、V层更加隔离开来，并释放了Activity的压力；


MVVM


MVVM是Model-View-ViewModel的简写，是从MVP演变过来，为了更加分离MV，代表有VUE,REACT,ANGULAR等框架
即模型-视图-视图模型。
【模型】指的是后端传递的数据。
【视图】指的是所看到的页面。
【视图模型】mvvm模式的核心，
它是连接view和model的桥梁。
它有两个方向：
一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。
二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据，实现的方式是：DOM 事件监听。
这两个方向都实现的，我们称之为数据的双向绑定。总结：在MVVM的框架下视图和模型是不能直接通信的。它们通过ViewModel来通信，ViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上就实现了数据的双向绑定。并且MVVM中的View 和 ViewModel可以互相通信。

他的优点
1. 低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的"View"上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。
2. 可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。
3. 独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。
4. 可测试。界面素来是比较难于测试的，测试可以针对ViewModel来写




